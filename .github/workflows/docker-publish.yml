name: Docker Image

on:
  push:
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-publish-alpine:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set lower case repo name 
        run: |
          echo IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Build alpine docker image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile.alpine
          push: false
          load: true
          tags: localbuild/testimage:alpine
      
      - name: Scan docker image
        uses: anchore/scan-action@v3
        with: 
          image: localbuild/testimage:alpine
          fail-build: true
          severity-cutoff: critical

      - name: Publish docker image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile.alpine
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-alpine

  docker-publish-ubuntu:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set lower case repo name 
        run: |
          echo IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      # - name: Check version
      #   run: echo "VERSION=$(echo '${{ github.event.head_commit.message }}' | grep -o 'v[0-9.]\+')" >> $GITHUB_ENV

      - name: Build alpine docker image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile.ubuntu
          push: false
          load: true
          tags: localbuild/testimage:ubuntu
      
      - name: Scan docker image
        uses: anchore/scan-action@v3
        with: 
          image: localbuild/testimage:ubuntu
          fail-build: true
          severity-cutoff: critical

      - name: Publish docker image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile.ubuntu
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ubuntu
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-ubuntu

      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   if: always()
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,eventName,ref,workflow,pullRequest
      #     author_name: ""
      #     text: ""
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}